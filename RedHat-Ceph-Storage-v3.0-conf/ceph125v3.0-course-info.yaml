---
Ceph logical architecture:
  - RADOS: Reliable Autonomic Distributed Object Store
  - librados: app access ceph cluster directly through API(c++, python, ruby, java, php, etc)
      - librbd: rados block device(vm instance, linux os) -> block level
      - librgw: rados gateway(web authentication and authoritation) -> object store level
  - POSIX cephfs: filesystem level
  
Ceph physical node:
  - ceph monitor node: mon, manage cluster map, manage crush map, monitor mon heartbeat, monitor osd heartbeat
    # Note: >=2n+1 mon nodes
  - ceph object store device node: osd, store data, monitor osd heartbeat
    #  Note: RHCS3 osd driver: filestore, RHCS4 osd driver: bluestore
  - ceph manager: mgr, collect cluster metrics, apply different plugins(dashboard, grafana, prometheus, zabbix)
  - ceph metadata server: mds, apply and manage cephfs metadata
  - ceph client: client, out cluster(manager cluster and deploy cluster), in cluster(components)
  
Data into ceph cluster:
  pool: ceph cluster logigcal partition
  pg: placement group
  # ceph crush-rule-set -> pool

  ### How use CRUSH to store object date into ceph osd by Cpeh?
  # ceph client data object -> ceph pool(pool-id) -> pg(pg-id) => CRUSH(crush-map, crush-rule-set) -> ceph osd(primary, secondary)
  # ----------------------------------------------------------    ----------------------------------------------------------------
  #                   logical mapping                                                      physical mapping

Ceph installition:
  - method: ceph-deploy, ceph-ansible(Red Hat Ceph 3.x), Ceph-web-ui(Red Hat Ceph 4.x), ceph-container-image
  - associated files:
      - /etc/ansible/hosts
      - /usr/share/ceph-ansible/ansible.cfg
      - /usr/share/ceph-ansible/site.yml
      - /usr/share/ceph-ansible/group_vars/{all,osds,clients,mons,mgrs,mdss,rgws}.yml
  - command:
      - $ ansible-playbook site.yml

Ceph commands:
  ceph -s
  ceph status
  ceph -w -> log: /var/log/ceph/ceph.log
  ceph df -> cluster level and pool level
  
  ceph osd df -> osd level
  ceph osd tree -> cluster level
  ceph osd crush tree -> crush map level
  
  ceph osd pool create <pool_name> <pg_num> <pgp_num> [replicated] <crush-rule-set>
  ceph osd pool application enable <pool_name> [rbd|rgw|cephfs]
  ceph osd pool set <pool_name> [size|nodelete|min_size] <value>
  ceph osd pool get <pool_name> [size|nodelete|min_size]

  ceph osd erasure-code-profile set <profile> k=3 m=2 crush-failure-domain=[osd|host|rack]
  ceph osd pool create <pool_name> <pg_num> <pgp_num> erasure <profile>

  ceph auth get-or-create client.<name> mon 'allow r' osd 'allow rw' -o /etc/ceph/ceph.client.<name>.keyring
  ceph auth caps client.<name> mon 'allow r' osd 'allow rw'
  ceph auth del client.<name>
  rm -f /etc/ceph/ceph.client.<name>.keyring

  rbd pool init <pool_name>
  rbd create [--id <name>] --size <number>[M|G] [--object-size <number>[M|G]] <pool_name>/<rbd_image_name>
  rbd rm [--id <name>] <pool_name>/<rbd_image_name>
  rbd ls [--id <name>] --pool <pool_name>
  rbd info [--id <name>] <pool_name>/<rbd_image_name>
  rbd resize --size <number>[M|G] <pool_name>/<rbd_image_name>
  
  rbd map [--id <name>] <pool_name>/]<rbd_image_name>
  rbd unmap /dev/rbdX
  rbd showmapped

  fsfreeze --freeze <mount_point>
  fsfreeze --unfreeze <mount_point>
  rbd snap create [--id <name>] <pool_name>/<rbd_image_name>@<snap_name>
  rbd snap remove [--id <name>] <pool_name>/<rbd_image_name>@<snap_name>
  rbd snap list [--id <name>] <pool_name>/<rbd_image_name>
  rbd snap protect [--id <name>] <pool_name>/<rbd_image_name>@<snap_name>
  rbd clone [--id <name>] <pool_name>/<rbd_image_name>@<snap_name> <pool_name>/<clone_name>
   
  ceph fs status

  ceph osd crush dump
  ceph osd getcrushmap -o ./<binfile>.bin
  crushtool -d ./<binfile>.bin -o ./<textfile>.txt

  ceph osd crush rule ls
  ceph osd crush dump <crush_rule_name>

Ceph iSCSI gateway:
  ceph iscsi initiator -> iscsi gateway(TCMU,LIO,librbd) -> ceph cluster rbd image
                          ------------------------------
                                  iscsi --> rbd
